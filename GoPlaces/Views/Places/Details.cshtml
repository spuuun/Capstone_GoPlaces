@model GoPlaces.Models.Place
<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 400px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }
</style>
@{
    ViewData["Title"] = "Details";
}
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@{var user = await UserManager.GetUserAsync(User);}

<h1>Details</h1>

<div>
    <h4>Place</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DateCreated)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.DateCreated)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Latitude)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Latitude)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Longitude)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Longitude)
        </dd>
    </dl>
</div>
<div>
    @{ if (user != null)
        {
            if (Model.Adventure.UserId == user.Id)
            {
                <a asp-action="Edit" asp-route-id="@Model.PlaceId">Edit</a> <span>|</span>
            }
        }
    }
    <a asp-controller="Adventures" asp-action="Details" asp-route-id="@Model.AdventureId">Back to List</a>
</div>


    <h3>My Google Maps Demo</h3>
    <!--The div element for the map -->
    <div id="map"></div>
    <script>
        // Initialize and add the map
        function initMap() {
            var place = { lat: @Model.Latitude, lng: @Model.Longitude};
            // The map, centered at Uluru
            var map = new google.maps.Map(
                document.getElementById('map'), { zoom: 4, center: place });
            // The marker, positioned at Uluru
            var marker = new google.maps.Marker({ position: place, map: map });
        }
    </script>
    <!--Load the API from the specified URL
    * The async attribute allows the browser to render the page while the API loads
    * The key parameter will contain your own API key (which is not needed for this tutorial)
    * The callback parameter executes the initMap() function
    -->
@{
    var sourceString = $"https://maps.googleapis.com/maps/api/staticmap?center={Model.Latitude},{Model.Longitude}&zoom=13&size=600x300&key=AIzaSyAr1ZC8BUTXIDEDe3ppbKf_8cfDSYLAc5Y";
        }
<h3>google map in image</h3>
<img src=@sourceString />